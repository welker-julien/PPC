main()
	nb=20
	
	for i in range (0,nb+1):
		
		mq = sysv_ipc.MessageQueue(i+1000, sysv_ipc.IPC_CREAT) #clé en i+1000 pour ne pas etre sur des  clé reservé
		
	mq = sysv_ipc.MessageQueue(1100, sysv_ipc.IPC_CREAT) #clé en 1100 pour le market	
	création market weather et houses

houses (nb)
	for i in range (0,nb)
		A=random(0,100)*0.1
		b=random(0,100)*0.1
		c=random(0,100)*0.1
		h = Process(target=Home, args=(i,nb,A,b,c))
		h.start()
 		h.join()
		
Home(i,nb,A,b,c)
	
	wait for message temp for market
	#calcul conso avec température en kelvin
	C=temp x A
	#calcul production avec température en kelvin
	P= temp x b + temp x c
	
	if P > C:
	# on vend
		Surprod=P-C
		while Surprod !=0
			#attente de client
			delay(100)
			mq = sysv_ipc.MessageQueue(i+1000)
			message, t = mq.receive()
			if message != 0
				value = message.decode()
   				value parse on ;
				qttdeman=value(2)
				if value(0)==1
					if value(2)<Surprod
						mq = sysv_ipc.MessageQueue(value(1)+1000)
						message = str((3;i)).encode() #value= 3 car accepte la demande
    						mq.send(message)
					wait
					mq = sysv_ipc.MessageQueue(i+1000)
					message, t = mq.receive()
					Surprod=Surprod-qttdeman
			

				
			else
				mq = sysv_ipc.MessageQueue(1100)
				message = str(2;i;Surprod).encode() #2 car on vend au market
    				mq.send(message)
				while mq for market pas reçu
					wait
				Surprod=0
			
					
		
	elif P<C
	#on achète
		
		for j in range (0, nb)
			mq = sysv_ipc.MessageQueue(j+1000)
			message = str((1;i;C-P)).encode() #value= 1 car on demande de l'energie
    			mq.send(message)
		wait
		mq = sysv_ipc.MessageQueue(i+1000)
		message, t = mq.receive()
		
		if message != 0
			value = message.decode()
   			value parse on ;
			print(P-C,  num process vendeur,num process acheteur)
			
			mq = sysv_ipc.MessageQueue(value(1)+1000)
			message = str(3;i;C-P)).encode() #3 car on acquite la vente
    			mq.send(message)
		else
			mq = sysv_ipc.MessageQueue(1100)
			message = str(1;i;C-P)).encode() #3 car on acquite la vente
    			mq.send(message)
		
				
	else
	#inexistant car on ne fait rien dans ce cas là
		


External()

	While True
		i=random(0,100)
		if i==1
			send signal to market
		wait(i)

Market()
	qtt_energie=0
	prix=0.14
	ext = Process(target=External)
	ext.start()
 	ext.join()
	
	def Price()
		Recuperer temperature
		prix=voir formule
		for i in range(nb)
			transmettre temperature à home(i)
			
	def transaction(volume, home,type)
		if type== vente
			inform home acceptation via mq home
			print( qttachete, prix, num process home)
		if type == achat
			inform home acceptation via mq home
			print( qttvendue, prix, num process home)
	while true
		Price()
	
	
		

		
		
		for element in queue :
			if semaphore=!0
				semaphore.acquire 
				trans = Thread(target=transaction, args(volume energie, n° home, type)
				trans.start()
 				trans.join()
				if type== vente
					qtt_energie=qtt_energie+qttachete
					Price()
				if type == achat
					qtt_energie=qtt_energie-qttvendue
					Price()
				semaphore.release
		if signal from External
		coef=1
			i=random(2,9)
			if i==5
				coef=coef x constante à définir
			if i==6
				coef=coef x constante2 à définir
			if i==7
				coef=coef x constante3 à définir
			if i==8
				coef=coef x constante4 à définir
			if i==9
				coef=coef x constante5 à définir
			if i==4
				coef=coef x constante6 à définir
			if i==3
				coef=coef x constante7 à définir
			if i==2
				coef=coef x constante8 à définir
			maj param prix correspondant avec coef
			Price()
	
	

Weather()
	#temp est une variable dans la mémoire partagé
	while true
		temp=293 #-20°C mémoire partagé avec market
		for i allant de 0 à 60  
			temp=temp+1
		for j allant de 0 à 60
			temp=temp-1
		wait (100)
	
