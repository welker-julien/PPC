main()
	nb=20
	
	for i in range (0,nb+1):
		
		mq = sysv_ipc.MessageQueue(i+1000, sysv_ipc.IPC_CREAT) #clé en i+1000 pour ne pas etre sur des  clé reservé
		
	mq = sysv_ipc.MessageQueue(1100, sysv_ipc.IPC_CREAT) #clé en 1100 pour le market	


houses (nb)
	for i in range (0,nb)
		h = Process(target=Home, args=(i,nb))
		h.start()
 		h.join()
		
Home(i,nb)
	A=random(0,100)*0.1
	b=random(0,100)*0.1
	c=random(0,100)*0.1
	#calcul conso avec température en kelvin
	C=temp x A
	#calcul production avec température en kelvin
	P= temp x b + temps x c
	
	if P > C:
	# on vend
		mutex.acquire
		etat[i]=surprod
		mutex.release
		#attente de client
		delay(100)
		mq = sysv_ipc.MessageQueue(i+1000)
		message, t = mq.receive()
		if message != 0
			value = message.decode()
   			value parse on ;
			
			if value(0)==1
				if value(2)<(P-C)
					mq = sysv_ipc.MessageQueue(value(1)+1000)
					message = str((3;i)).encode() #value= 3 car accepte la demande
    					mq.send(message)
			wait
			mq = sysv_ipc.MessageQueue(i+1000)
			message, t = mq.receive()

				
		else
			mq = sysv_ipc.MessageQueue(1100)
			message = str(2;i;P-C)).encode() #2 car on vend au market
    			mq.send(message)
					
		
	elif P<C
	#on achète
		
		for j in range (0, nb)
			mq = sysv_ipc.MessageQueue(j+1000)
			message = str((1;i;P-C)).encode() #value= 1 car on demande de l'energie
    			mq.send(message)
		wait
		mq = sysv_ipc.MessageQueue(i+1000)
		message, t = mq.receive()
		
		if message != 0
			value = message.decode()
   			value parse on ;
			print(P-C,  num process vendeur,num process acheteur)
			
			mq = sysv_ipc.MessageQueue(value(1)+1000)
			message = str(3;i;P-C)).encode() #3 car on acquite la vente
    			mq.send(message)
		else
			mq = sysv_ipc.MessageQueue(1100)
			message = str(1;i;P-C)).encode() #3 car on acquite la vente
    			mq.send(message)
		
				
	else
	#inexistant car on ne fait rien dans ce cas là
		


External()
	coef=1
	While True
		i=random(0,100)
		if i==1
			send signal to market
		wait(i)

Market()
	qtt_energie=0
	prix=0.14
	ext = Process(target=External)
	ext.start()
 	ext.join()
	Price()
	for i in range(nb)
		transmettre temperature à home(i)
		
	def Price()
		chercher infos(température)
		prix=voir formule
		
		
	for element in queue :
		if semaphore=!0
			semaphore.acquire 
			trans = Thread(target=transaction, args(volume energie, n° home, type)
			trans.start()
 			trans.join()
			if type== vente
				qtt_energie=qtt_energie+qttachete
				Price()
			if type == achat
				qtt_energie=qtt_energie-qttvendue
				Price()
			semaphore.release
	if signal from Weather
	
	transaction(volume, home,type)
		if type== vente
			print( qttachete, prix, num process home)
		if type == achat
			print( qttvendue, prix, num process home)
	
		

Weather()
	#temp est une variable dans la mémoire partagé
	while true
		temp=293 #-20°C mémoire partagé avec market
		for i allant de 0 à 60  
			temp=temp+1
		for j allant de 0 à 60
			temp=temp-1
	
