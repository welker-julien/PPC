import threading
import multiprocessing

houses (nb)
	for i in range (0,nb)
		h = Process(target=Home, args=(i,))
		h.start()
 		h.join()
		
Home(i)
	#calcul conso avec température en kelvin
	C=temp x A
	#calcul production avec température en kelvin
	P= temp x b + temps x c
	if P> C
	# on vend
		mutex.acquire
		etat[i]=surprod
		mutex.release
		#attente de client
		delay(100)
		if message queue != 0
		.
		.
		.
	elif P<C
	#on achète
		mutex.acquire
		etat[i]=sucons
		mutex.release
		for j in range (0, len(etat[]))
			if etat[j]==surprod
				messagequeue.demande
				break #pour ne pas aller demander à un autre 
				#de l'energie alors qu'on en a trouvé
				print(qqt energie,  num process vendeur,num process acheteur)
	else
	#inexistant car on ne fait rien dans ce cas là
		mutex.acquire
		etat[i]=nothing
		mutex.release


External()
	coef=1
	While True
		i=random(0,1000)
		if i==500
			coef=coef x constante à définir
		if i==600
			coef=coef x constante2 à définir
		if i==700
			coef=coef x constante3 à définir
		if i==800
			coef=coef x constante4 à définir
		if i==900
			coef=coef x constante5 à définir
		if i==400
			coef=coef x constante6 à définir
		if i==300
			coef=coef x constante7 à définir
		if i==200
			coef=coef x constante8 à définir
		data_ready=processing.Event()
		wait(i)

Market()
	qtt_energie=0
	prix=
	ext = Process(target=External)
	ext.start()
 	ext.join()
	def Price()
		chercher infos(température)
		calcul du prix
		actualiser le prix
		
		for element in queue :
			if semaphore=!0
				semaphore.acquire 
				trans = Thread(target=transaction, args(volume energie, n° home, type)
				trans.start()
 				trans.join()
				semaphore.release
	
	transaction(volume, home,type)
		if type== vente
			inform home acceptation via la message queue
			print( qttachete, prix, num process home)
			MAJ quantité achété par market et prix
		if type == achat
			inform home acceptation via la message queue
			print( qttvendue, prix, num process home)
			MAJ quantité vendue par market et prix

Weather()
	#temp est une variable dans la mémoire partagé
	while true
		temp=293 #-20°C
		for i allant de 0 à 60  
			temp=temp+1
		for j allant de 0 à 60
			temp=temp-1
